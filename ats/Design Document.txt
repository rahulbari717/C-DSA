# Phase 1 Design Document: ATS Resume Matcher

## Overview
The first phase of the Job Application Tracker focuses on the ATS (Applicant Tracking System) Resume Matcher component. This module will extract information from a job description, match it against a resume in PDF format, calculate an ATS score, and display which skills are present and which are absent in the resume.

## Objectives
1. Parse job descriptions to extract key skills and requirements
2. Extract text from PDF resumes
3. Perform matching between job requirements and resume content
4. Calculate an ATS match score
5. Display matching and missing skills
6. Create a simple CLI interface

## Component Design

### Main Components

#### 1. PDF Parser
- Extracts text content from PDF resumes
- Uses `pdftotext` library (via system command)
- Handles potential PDF parsing errors

#### 2. Keyword Extractor
- Analyzes job description text
- Identifies technical skills, qualifications, and requirements
- Uses frequency analysis and contextual clues
- Filters common words and focuses on relevant terms

#### 3. Matcher Engine
- Compares extracted keywords against resume text
- Uses string matching algorithms
- Handles variations in terminology

#### 4. Score Calculator
- Weights different keywords based on frequency and positioning
- Calculates percentage match
- Categorizes match level (Low/Medium/High)

#### 5. CLI Interface
- Prompts for job description input
- Accepts resume file path
- Displays results in a readable format

### Data Flow

```
+-------------+     +----------------+     +---------------+
| Job         |---->| Keyword        |---->| List of       |
| Description |     | Extractor      |     | Requirements  |
+-------------+     +----------------+     +---------------+
                                                  |
                                                  v
+-------------+     +----------------+     +---------------+
| PDF         |---->| Text           |---->| Resume        |
| Resume      |     | Extractor      |     | Content       |
+-------------+     +----------------+     +---------------+
                                                  |
                                                  v
                                           +---------------+
                                           | Matcher       |
                                           | Engine        |
                                           +---------------+
                                                  |
                                                  v
                                           +---------------+
                                           | Score         |
                                           | Calculator    |
                                           +---------------+
                                                  |
                                                  v
                                           +---------------+
                                           | Results       |
                                           | Display       |
                                           +---------------+
```

## Data Structures

### KeywordList
```c
typedef struct {
    char word[50];
    int importance;  // 1-3, where 3 is highest importance
    int found;       // Boolean flag
} Keyword;

typedef struct {
    Keyword* keywords;
    int count;
    int capacity;
} KeywordList;
```

### ResumeContent
```c
typedef struct {
    char* text;
    size_t size;
} ResumeContent;
```

### MatchResult
```c
typedef struct {
    int total_keywords;
    int matched_keywords;
    float match_percentage;
    char match_level[20]; // "Low", "Medium", or "High"
    Keyword* keywords;    // Array of keywords with found status
} MatchResult;
```

## Function Specifications

### PDF Text Extraction
```c
// Extract text from PDF file
ResumeContent extract_text_from_pdf(const char* pdf_path);
```

### Keyword Extraction
```c
// Extract keywords from job description
KeywordList extract_keywords(const char* job_description);
```

### Matching
```c
// Match keywords against resume
MatchResult match_keywords(KeywordList* keywords, ResumeContent* resume);

// Calculate match score
float calculate_match_score(MatchResult* result);

// Determine match level based on score
void determine_match_level(MatchResult* result);
```

### Display
```c
// Display match results
void display_match_results(MatchResult* result);
```

## Technical Requirements

### Libraries
- **Standard C Libraries**: stdio.h, stdlib.h, string.h
- **External Utilities**: pdftotext (command-line utility from poppler-utils)

### Tools
- **Compiler**: GCC
- **Build System**: Make
- **External Dependencies**: poppler-utils package

## Error Handling

### PDF Parsing Errors
- Check if PDF exists
- Verify if text extraction succeeded
- Handle empty or corrupted PDFs

### Input Validation
- Validate job description (not empty)
- Check PDF file path
- Ensure memory allocation success

## Limitations
- Uses system command for PDF extraction rather than direct library integration
- Basic keyword extraction without advanced NLP
- No persistent storage in Phase 1
- Command-line interface only
- Limited error recovery options

## Future Extensions
- Improved keyword extraction using NLP
- Support for more document formats beyond PDF
- Persistent storage of results
- Integration with job tracking system
- UI improvements

## Testing Strategy

### Unit Tests
1. Test PDF extraction with various resume formats
2. Test keyword extraction with different job descriptions
3. Test matching algorithm accuracy
4. Test score calculation

### Integration Tests
1. End-to-end test of entire ATS matching process
2. Test with actual job descriptions and resumes

### Test Data
- Sample job descriptions from multiple industries
- Sample resumes in various PDF formats
- Edge cases: empty files, large files, malformed content